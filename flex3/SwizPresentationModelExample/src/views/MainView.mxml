<?xml version="1.0" encoding="utf-8"?>
<mx:TabNavigator xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:views="views.*"
	width="500" height="500" horizontalAlign="center"
	selectedIndex="{ model.activeView }"
	change="{ model != null ? model.setActiveView( selectedIndex ) : null }">
	
	<mx:Script>
		<![CDATA[
			import models.presentation.IMainPresentationModel;
			
			// don't miss the inline handler on the root tag above that will call setActiveView()
			// on our model whenever the selected tab changes. because that is autowired
			// with twoWay=true, that change will propagate back to ApplicationModel, allowing
			// the ModeMonitor view component declared in our app root to be informed of changes
			
			/**
			 * Public member variable that will hold our presentation model.
			 * Since [Autowire] does not include a bean attribute, Swiz will autowire by type.
			 * Again, notice that even though the type of this property is IMainPresentationModel,
			 * Swiz is smart enough to find a bean that implements this interface and inject it here.
			 * Coding to interfaces is good!
			 */
			[Autowire]
			[Bindable]
			public var model:IMainPresentationModel;
			
		]]>
	</mx:Script>
	
	<views:EmployeeView label="Employees" width="100%" height="100%" />
	
	<views:InventoryView label="Inventory" width="100%" height="100%" />
	
</mx:TabNavigator>
